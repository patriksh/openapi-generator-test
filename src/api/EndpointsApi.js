/**
 * SellAuth
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BlacklistEntry from '../model/BlacklistEntry';
import Coupon from '../model/Coupon';
import CustomField from '../model/CustomField';
import DeleteV1ShopsShopIdBlacklistBlacklistId200Response from '../model/DeleteV1ShopsShopIdBlacklistBlacklistId200Response';
import DeleteV1ShopsShopIdCouponsCouponId200Response from '../model/DeleteV1ShopsShopIdCouponsCouponId200Response';
import DeleteV1ShopsShopIdCustomFieldsCustomFieldId200Response from '../model/DeleteV1ShopsShopIdCustomFieldsCustomFieldId200Response';
import DeleteV1ShopsShopIdDomainsDomainId200Response from '../model/DeleteV1ShopsShopIdDomainsDomainId200Response';
import DeleteV1ShopsShopIdGroupsGroupId200Response from '../model/DeleteV1ShopsShopIdGroupsGroupId200Response';
import DeleteV1ShopsShopIdImagesImageId200Response from '../model/DeleteV1ShopsShopIdImagesImageId200Response';
import DeleteV1ShopsShopIdProductsProductId200Response from '../model/DeleteV1ShopsShopIdProductsProductId200Response';
import DeleteV1ShopsShopIdThemesThemeId200Response from '../model/DeleteV1ShopsShopIdThemesThemeId200Response';
import Domain from '../model/Domain';
import Feedback from '../model/Feedback';
import GetV1ShopsShopIdBlacklist200Response from '../model/GetV1ShopsShopIdBlacklist200Response';
import GetV1ShopsShopIdCoupons200ResponseInner from '../model/GetV1ShopsShopIdCoupons200ResponseInner';
import GetV1ShopsShopIdFeedbacks200Response from '../model/GetV1ShopsShopIdFeedbacks200Response';
import GetV1ShopsShopIdGroups200ResponseInner from '../model/GetV1ShopsShopIdGroups200ResponseInner';
import GetV1ShopsShopIdGroupsGroupId200Response from '../model/GetV1ShopsShopIdGroupsGroupId200Response';
import GetV1ShopsShopIdInvoices200Response from '../model/GetV1ShopsShopIdInvoices200Response';
import GetV1ShopsShopIdInvoicesInvoiceId200Response from '../model/GetV1ShopsShopIdInvoicesInvoiceId200Response';
import GetV1ShopsShopIdInvoicesInvoiceIdProcess200Response from '../model/GetV1ShopsShopIdInvoicesInvoiceIdProcess200Response';
import GetV1ShopsShopIdInvoicesInvoiceIdProcess400Response from '../model/GetV1ShopsShopIdInvoicesInvoiceIdProcess400Response';
import GetV1ShopsShopIdPayouts200Response from '../model/GetV1ShopsShopIdPayouts200Response';
import GetV1ShopsShopIdPayoutsBalances200Response from '../model/GetV1ShopsShopIdPayoutsBalances200Response';
import GetV1ShopsShopIdPayoutsTransactions200Response from '../model/GetV1ShopsShopIdPayoutsTransactions200Response';
import GetV1ShopsShopIdProducts200Response from '../model/GetV1ShopsShopIdProducts200Response';
import GetV1ShopsShopIdProducts500Response from '../model/GetV1ShopsShopIdProducts500Response';
import GetV1ShopsShopIdStats200Response from '../model/GetV1ShopsShopIdStats200Response';
import Group from '../model/Group';
import Image from '../model/Image';
import PostV1ShopsCreate200Response from '../model/PostV1ShopsCreate200Response';
import PostV1ShopsCreate400Response from '../model/PostV1ShopsCreate400Response';
import PostV1ShopsCreate500Response from '../model/PostV1ShopsCreate500Response';
import PostV1ShopsShopIdBlacklistRequest from '../model/PostV1ShopsShopIdBlacklistRequest';
import PostV1ShopsShopIdCouponsRequest from '../model/PostV1ShopsShopIdCouponsRequest';
import PostV1ShopsShopIdCustomFieldsRequest from '../model/PostV1ShopsShopIdCustomFieldsRequest';
import PostV1ShopsShopIdFeedbacksFeedbackIdAppeal200Response from '../model/PostV1ShopsShopIdFeedbacksFeedbackIdAppeal200Response';
import PostV1ShopsShopIdFeedbacksFeedbackIdReply200Response from '../model/PostV1ShopsShopIdFeedbacksFeedbackIdReply200Response';
import PostV1ShopsShopIdFeedbacksFeedbackIdReplyRequest from '../model/PostV1ShopsShopIdFeedbacksFeedbackIdReplyRequest';
import PostV1ShopsShopIdGroupsRequest from '../model/PostV1ShopsShopIdGroupsRequest';
import PostV1ShopsShopIdInvoicesInvoiceIdArchive200Response from '../model/PostV1ShopsShopIdInvoicesInvoiceIdArchive200Response';
import PostV1ShopsShopIdInvoicesInvoiceIdArchive400Response from '../model/PostV1ShopsShopIdInvoicesInvoiceIdArchive400Response';
import PostV1ShopsShopIdInvoicesInvoiceIdUnarchive200Response from '../model/PostV1ShopsShopIdInvoicesInvoiceIdUnarchive200Response';
import PostV1ShopsShopIdInvoicesInvoiceIdUnarchive400Response from '../model/PostV1ShopsShopIdInvoicesInvoiceIdUnarchive400Response';
import PostV1ShopsShopIdPayoutsPayout200Response from '../model/PostV1ShopsShopIdPayoutsPayout200Response';
import PostV1ShopsShopIdPayoutsPayout400Response from '../model/PostV1ShopsShopIdPayoutsPayout400Response';
import PostV1ShopsShopIdPayoutsPayoutRequest from '../model/PostV1ShopsShopIdPayoutsPayoutRequest';
import PostV1ShopsShopIdProducts200Response from '../model/PostV1ShopsShopIdProducts200Response';
import PostV1ShopsShopIdProductsRequest from '../model/PostV1ShopsShopIdProductsRequest';
import PostV1ShopsShopIdThemesRequest from '../model/PostV1ShopsShopIdThemesRequest';
import PostV1ShopsShopIdThemesThemeIdImport200Response from '../model/PostV1ShopsShopIdThemesThemeIdImport200Response';
import PostV1ShopsShopIdThemesThemeIdUpdate200Response from '../model/PostV1ShopsShopIdThemesThemeIdUpdate200Response';
import PutV1ShopsShopIdCouponsCouponIdUpdateRequest from '../model/PutV1ShopsShopIdCouponsCouponIdUpdateRequest';
import PutV1ShopsShopIdCustomFieldsCustomFieldIdRequest from '../model/PutV1ShopsShopIdCustomFieldsCustomFieldIdRequest';
import PutV1ShopsShopIdGroupsGroupIdUpdateRequest from '../model/PutV1ShopsShopIdGroupsGroupIdUpdateRequest';
import PutV1ShopsShopIdPaymentProcessorsUpdate200Response from '../model/PutV1ShopsShopIdPaymentProcessorsUpdate200Response';
import PutV1ShopsShopIdPaymentProcessorsUpdateRequest from '../model/PutV1ShopsShopIdPaymentProcessorsUpdateRequest';
import PutV1ShopsShopIdProductsProductIdUpdateRequest from '../model/PutV1ShopsShopIdProductsProductIdUpdateRequest';
import PutV1ShopsShopIdThemesThemeIdApply200Response from '../model/PutV1ShopsShopIdThemesThemeIdApply200Response';
import PutV1ShopsShopIdThemesThemeIdRequest from '../model/PutV1ShopsShopIdThemesThemeIdRequest';
import PutV1ShopsShopIdUpdate400Response from '../model/PutV1ShopsShopIdUpdate400Response';
import PutV1ShopsShopIdUpdateRequest from '../model/PutV1ShopsShopIdUpdateRequest';
import Shop from '../model/Shop';
import Theme from '../model/Theme';
import ValidationError from '../model/ValidationError';

/**
* Endpoints service.
* @module api/EndpointsApi
* @version 1.0.0
*/
export default class EndpointsApi {

    /**
    * Constructs a new EndpointsApi. 
    * @alias module:api/EndpointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteV1ShopsShopIdBlacklistBlacklistId operation.
     * @callback module:api/EndpointsApi~deleteV1ShopsShopIdBlacklistBlacklistIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteV1ShopsShopIdBlacklistBlacklistId200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} blacklistId 
     * @param {module:api/EndpointsApi~deleteV1ShopsShopIdBlacklistBlacklistIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteV1ShopsShopIdBlacklistBlacklistId200Response}
     */
    deleteV1ShopsShopIdBlacklistBlacklistId(shopId, blacklistId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling deleteV1ShopsShopIdBlacklistBlacklistId");
      }
      // verify the required parameter 'blacklistId' is set
      if (blacklistId === undefined || blacklistId === null) {
        throw new Error("Missing the required parameter 'blacklistId' when calling deleteV1ShopsShopIdBlacklistBlacklistId");
      }

      let pathParams = {
        'shopId': shopId,
        'blacklistId': blacklistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteV1ShopsShopIdBlacklistBlacklistId200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/blacklist/{blacklistId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV1ShopsShopIdCouponsCouponId operation.
     * @callback module:api/EndpointsApi~deleteV1ShopsShopIdCouponsCouponIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteV1ShopsShopIdCouponsCouponId200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} couponId 
     * @param {module:api/EndpointsApi~deleteV1ShopsShopIdCouponsCouponIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteV1ShopsShopIdCouponsCouponId200Response}
     */
    deleteV1ShopsShopIdCouponsCouponId(shopId, couponId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling deleteV1ShopsShopIdCouponsCouponId");
      }
      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling deleteV1ShopsShopIdCouponsCouponId");
      }

      let pathParams = {
        'shopId': shopId,
        'couponId': couponId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteV1ShopsShopIdCouponsCouponId200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/coupons/{couponId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV1ShopsShopIdCustomFieldsCustomFieldId operation.
     * @callback module:api/EndpointsApi~deleteV1ShopsShopIdCustomFieldsCustomFieldIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteV1ShopsShopIdCustomFieldsCustomFieldId200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} customFieldId 
     * @param {module:api/EndpointsApi~deleteV1ShopsShopIdCustomFieldsCustomFieldIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteV1ShopsShopIdCustomFieldsCustomFieldId200Response}
     */
    deleteV1ShopsShopIdCustomFieldsCustomFieldId(shopId, customFieldId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling deleteV1ShopsShopIdCustomFieldsCustomFieldId");
      }
      // verify the required parameter 'customFieldId' is set
      if (customFieldId === undefined || customFieldId === null) {
        throw new Error("Missing the required parameter 'customFieldId' when calling deleteV1ShopsShopIdCustomFieldsCustomFieldId");
      }

      let pathParams = {
        'shopId': shopId,
        'customFieldId': customFieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteV1ShopsShopIdCustomFieldsCustomFieldId200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/custom-fields/{customFieldId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV1ShopsShopIdDomainsDomainId operation.
     * @callback module:api/EndpointsApi~deleteV1ShopsShopIdDomainsDomainIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteV1ShopsShopIdDomainsDomainId200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} domainId 
     * @param {module:api/EndpointsApi~deleteV1ShopsShopIdDomainsDomainIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteV1ShopsShopIdDomainsDomainId200Response}
     */
    deleteV1ShopsShopIdDomainsDomainId(shopId, domainId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling deleteV1ShopsShopIdDomainsDomainId");
      }
      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling deleteV1ShopsShopIdDomainsDomainId");
      }

      let pathParams = {
        'shopId': shopId,
        'domainId': domainId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteV1ShopsShopIdDomainsDomainId200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/domains/{domainId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV1ShopsShopIdGroupsGroupId operation.
     * @callback module:api/EndpointsApi~deleteV1ShopsShopIdGroupsGroupIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteV1ShopsShopIdGroupsGroupId200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} groupId 
     * @param {module:api/EndpointsApi~deleteV1ShopsShopIdGroupsGroupIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteV1ShopsShopIdGroupsGroupId200Response}
     */
    deleteV1ShopsShopIdGroupsGroupId(shopId, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling deleteV1ShopsShopIdGroupsGroupId");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteV1ShopsShopIdGroupsGroupId");
      }

      let pathParams = {
        'shopId': shopId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteV1ShopsShopIdGroupsGroupId200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/groups/{groupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV1ShopsShopIdImagesImageId operation.
     * @callback module:api/EndpointsApi~deleteV1ShopsShopIdImagesImageIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteV1ShopsShopIdImagesImageId200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} imageId 
     * @param {module:api/EndpointsApi~deleteV1ShopsShopIdImagesImageIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteV1ShopsShopIdImagesImageId200Response}
     */
    deleteV1ShopsShopIdImagesImageId(shopId, imageId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling deleteV1ShopsShopIdImagesImageId");
      }
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling deleteV1ShopsShopIdImagesImageId");
      }

      let pathParams = {
        'shopId': shopId,
        'imageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteV1ShopsShopIdImagesImageId200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/images/{imageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV1ShopsShopIdProductsProductId operation.
     * @callback module:api/EndpointsApi~deleteV1ShopsShopIdProductsProductIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteV1ShopsShopIdProductsProductId200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} productId 
     * @param {module:api/EndpointsApi~deleteV1ShopsShopIdProductsProductIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteV1ShopsShopIdProductsProductId200Response}
     */
    deleteV1ShopsShopIdProductsProductId(shopId, productId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling deleteV1ShopsShopIdProductsProductId");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteV1ShopsShopIdProductsProductId");
      }

      let pathParams = {
        'shopId': shopId,
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteV1ShopsShopIdProductsProductId200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/products/{productId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV1ShopsShopIdThemesThemeId operation.
     * @callback module:api/EndpointsApi~deleteV1ShopsShopIdThemesThemeIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteV1ShopsShopIdThemesThemeId200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} themeId 
     * @param {module:api/EndpointsApi~deleteV1ShopsShopIdThemesThemeIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteV1ShopsShopIdThemesThemeId200Response}
     */
    deleteV1ShopsShopIdThemesThemeId(shopId, themeId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling deleteV1ShopsShopIdThemesThemeId");
      }
      // verify the required parameter 'themeId' is set
      if (themeId === undefined || themeId === null) {
        throw new Error("Missing the required parameter 'themeId' when calling deleteV1ShopsShopIdThemesThemeId");
      }

      let pathParams = {
        'shopId': shopId,
        'themeId': themeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteV1ShopsShopIdThemesThemeId200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/themes/{themeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1Shops operation.
     * @callback module:api/EndpointsApi~getV1ShopsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Shop>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all shops for the authenticated user.
     * This endpoint allows you to get the `shopId` parameter.
     * @param {module:api/EndpointsApi~getV1ShopsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Shop>}
     */
    getV1Shops(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Shop];
      return this.apiClient.callApi(
        '/v1/shops', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopId operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Shop} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Shop}
     */
    getV1ShopsShopId(shopId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopId");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Shop;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdBlacklist operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdBlacklistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetV1ShopsShopIdBlacklist200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdBlacklistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetV1ShopsShopIdBlacklist200Response}
     */
    getV1ShopsShopIdBlacklist(shopId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdBlacklist");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetV1ShopsShopIdBlacklist200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/blacklist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdCoupons operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdCouponsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetV1ShopsShopIdCoupons200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdCouponsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetV1ShopsShopIdCoupons200ResponseInner>}
     */
    getV1ShopsShopIdCoupons(shopId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdCoupons");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetV1ShopsShopIdCoupons200ResponseInner];
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/coupons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdCouponsCouponId operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdCouponsCouponIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetV1ShopsShopIdCoupons200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} couponId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdCouponsCouponIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetV1ShopsShopIdCoupons200ResponseInner}
     */
    getV1ShopsShopIdCouponsCouponId(shopId, couponId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdCouponsCouponId");
      }
      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling getV1ShopsShopIdCouponsCouponId");
      }

      let pathParams = {
        'shopId': shopId,
        'couponId': couponId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetV1ShopsShopIdCoupons200ResponseInner;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/coupons/{couponId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdCustomFields operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomField>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomField>}
     */
    getV1ShopsShopIdCustomFields(shopId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdCustomFields");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CustomField];
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/custom-fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdDomains operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdDomainsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Domain>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Domain>}
     */
    getV1ShopsShopIdDomains(shopId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdDomains");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Domain];
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdDomainsDomainId operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdDomainsDomainIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Domain} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} domainId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdDomainsDomainIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Domain}
     */
    getV1ShopsShopIdDomainsDomainId(shopId, domainId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdDomainsDomainId");
      }
      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling getV1ShopsShopIdDomainsDomainId");
      }

      let pathParams = {
        'shopId': shopId,
        'domainId': domainId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Domain;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/domains/{domainId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdFeedbacks operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdFeedbacksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetV1ShopsShopIdFeedbacks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdFeedbacksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetV1ShopsShopIdFeedbacks200Response}
     */
    getV1ShopsShopIdFeedbacks(shopId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdFeedbacks");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetV1ShopsShopIdFeedbacks200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/feedbacks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdFeedbacksFeedbackId operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdFeedbacksFeedbackIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feedback} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} feedbackId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdFeedbacksFeedbackIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feedback}
     */
    getV1ShopsShopIdFeedbacksFeedbackId(shopId, feedbackId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdFeedbacksFeedbackId");
      }
      // verify the required parameter 'feedbackId' is set
      if (feedbackId === undefined || feedbackId === null) {
        throw new Error("Missing the required parameter 'feedbackId' when calling getV1ShopsShopIdFeedbacksFeedbackId");
      }

      let pathParams = {
        'shopId': shopId,
        'feedbackId': feedbackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Feedback;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/feedbacks/{feedbackId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdGroups operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetV1ShopsShopIdGroups200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetV1ShopsShopIdGroups200ResponseInner>}
     */
    getV1ShopsShopIdGroups(shopId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdGroups");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetV1ShopsShopIdGroups200ResponseInner];
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdGroupsGroupId operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdGroupsGroupIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetV1ShopsShopIdGroupsGroupId200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} groupId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdGroupsGroupIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetV1ShopsShopIdGroupsGroupId200Response}
     */
    getV1ShopsShopIdGroupsGroupId(shopId, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdGroupsGroupId");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getV1ShopsShopIdGroupsGroupId");
      }

      let pathParams = {
        'shopId': shopId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetV1ShopsShopIdGroupsGroupId200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/groups/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdImages operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdImagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Image>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Image>}
     */
    getV1ShopsShopIdImages(shopId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdImages");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Image];
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdInvoices operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdInvoicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetV1ShopsShopIdInvoices200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetV1ShopsShopIdInvoices200Response}
     */
    getV1ShopsShopIdInvoices(shopId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdInvoices");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetV1ShopsShopIdInvoices200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdInvoicesInvoiceId operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdInvoicesInvoiceIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetV1ShopsShopIdInvoicesInvoiceId200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} invoiceId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdInvoicesInvoiceIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetV1ShopsShopIdInvoicesInvoiceId200Response}
     */
    getV1ShopsShopIdInvoicesInvoiceId(shopId, invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdInvoicesInvoiceId");
      }
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling getV1ShopsShopIdInvoicesInvoiceId");
      }

      let pathParams = {
        'shopId': shopId,
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetV1ShopsShopIdInvoicesInvoiceId200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/invoices/{invoiceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdInvoicesInvoiceIdProcess operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdInvoicesInvoiceIdProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetV1ShopsShopIdInvoicesInvoiceIdProcess200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} invoiceId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdInvoicesInvoiceIdProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetV1ShopsShopIdInvoicesInvoiceIdProcess200Response}
     */
    getV1ShopsShopIdInvoicesInvoiceIdProcess(shopId, invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdInvoicesInvoiceIdProcess");
      }
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling getV1ShopsShopIdInvoicesInvoiceIdProcess");
      }

      let pathParams = {
        'shopId': shopId,
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetV1ShopsShopIdInvoicesInvoiceIdProcess200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/invoices/{invoiceId}/process', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdPayouts operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdPayoutsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetV1ShopsShopIdPayouts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdPayoutsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetV1ShopsShopIdPayouts200Response}
     */
    getV1ShopsShopIdPayouts(shopId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdPayouts");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetV1ShopsShopIdPayouts200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/payouts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdPayoutsBalances operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdPayoutsBalancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetV1ShopsShopIdPayoutsBalances200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdPayoutsBalancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetV1ShopsShopIdPayoutsBalances200Response}
     */
    getV1ShopsShopIdPayoutsBalances(shopId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdPayoutsBalances");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetV1ShopsShopIdPayoutsBalances200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/payouts/balances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdPayoutsTransactions operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdPayoutsTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetV1ShopsShopIdPayoutsTransactions200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdPayoutsTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetV1ShopsShopIdPayoutsTransactions200Response}
     */
    getV1ShopsShopIdPayoutsTransactions(shopId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdPayoutsTransactions");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetV1ShopsShopIdPayoutsTransactions200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/payouts/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdProducts operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetV1ShopsShopIdProducts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetV1ShopsShopIdProducts200Response}
     */
    getV1ShopsShopIdProducts(shopId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdProducts");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetV1ShopsShopIdProducts200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdProductsProductId operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdProductsProductIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostV1ShopsShopIdProducts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} productId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdProductsProductIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostV1ShopsShopIdProducts200Response}
     */
    getV1ShopsShopIdProductsProductId(shopId, productId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdProductsProductId");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getV1ShopsShopIdProductsProductId");
      }

      let pathParams = {
        'shopId': shopId,
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PostV1ShopsShopIdProducts200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/products/{productId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdStats operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetV1ShopsShopIdStats200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetV1ShopsShopIdStats200Response}
     */
    getV1ShopsShopIdStats(shopId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdStats");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetV1ShopsShopIdStats200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdThemes operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdThemesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Theme>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdThemesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Theme>}
     */
    getV1ShopsShopIdThemes(shopId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdThemes");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Theme];
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/themes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1ShopsShopIdThemesThemeId operation.
     * @callback module:api/EndpointsApi~getV1ShopsShopIdThemesThemeIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Theme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} themeId 
     * @param {module:api/EndpointsApi~getV1ShopsShopIdThemesThemeIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Theme}
     */
    getV1ShopsShopIdThemesThemeId(shopId, themeId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling getV1ShopsShopIdThemesThemeId");
      }
      // verify the required parameter 'themeId' is set
      if (themeId === undefined || themeId === null) {
        throw new Error("Missing the required parameter 'themeId' when calling getV1ShopsShopIdThemesThemeId");
      }

      let pathParams = {
        'shopId': shopId,
        'themeId': themeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Theme;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/themes/{themeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV1ShopsCreate operation.
     * @callback module:api/EndpointsApi~postV1ShopsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostV1ShopsCreate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} name 
     * @param {String} subdomain Must match the regex /^[A-Za-z0-9-]+$/.
     * @param {Object} opts Optional parameters
     * @param {File} [logo] Must be an image.
     * @param {module:api/EndpointsApi~postV1ShopsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostV1ShopsCreate200Response}
     */
    postV1ShopsCreate(name, subdomain, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postV1ShopsCreate");
      }
      // verify the required parameter 'subdomain' is set
      if (subdomain === undefined || subdomain === null) {
        throw new Error("Missing the required parameter 'subdomain' when calling postV1ShopsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': name,
        'subdomain': subdomain,
        'logo': opts['logo']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PostV1ShopsCreate200Response;
      return this.apiClient.callApi(
        '/v1/shops/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV1ShopsShopIdBlacklist operation.
     * @callback module:api/EndpointsApi~postV1ShopsShopIdBlacklistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlacklistEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:model/PostV1ShopsShopIdBlacklistRequest} postV1ShopsShopIdBlacklistRequest 
     * @param {module:api/EndpointsApi~postV1ShopsShopIdBlacklistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlacklistEntry}
     */
    postV1ShopsShopIdBlacklist(shopId, postV1ShopsShopIdBlacklistRequest, callback) {
      let postBody = postV1ShopsShopIdBlacklistRequest;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling postV1ShopsShopIdBlacklist");
      }
      // verify the required parameter 'postV1ShopsShopIdBlacklistRequest' is set
      if (postV1ShopsShopIdBlacklistRequest === undefined || postV1ShopsShopIdBlacklistRequest === null) {
        throw new Error("Missing the required parameter 'postV1ShopsShopIdBlacklistRequest' when calling postV1ShopsShopIdBlacklist");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BlacklistEntry;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/blacklist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV1ShopsShopIdCoupons operation.
     * @callback module:api/EndpointsApi~postV1ShopsShopIdCouponsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetV1ShopsShopIdCoupons200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:model/PostV1ShopsShopIdCouponsRequest} postV1ShopsShopIdCouponsRequest 
     * @param {module:api/EndpointsApi~postV1ShopsShopIdCouponsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetV1ShopsShopIdCoupons200ResponseInner>}
     */
    postV1ShopsShopIdCoupons(shopId, postV1ShopsShopIdCouponsRequest, callback) {
      let postBody = postV1ShopsShopIdCouponsRequest;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling postV1ShopsShopIdCoupons");
      }
      // verify the required parameter 'postV1ShopsShopIdCouponsRequest' is set
      if (postV1ShopsShopIdCouponsRequest === undefined || postV1ShopsShopIdCouponsRequest === null) {
        throw new Error("Missing the required parameter 'postV1ShopsShopIdCouponsRequest' when calling postV1ShopsShopIdCoupons");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [GetV1ShopsShopIdCoupons200ResponseInner];
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/coupons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV1ShopsShopIdCustomFields operation.
     * @callback module:api/EndpointsApi~postV1ShopsShopIdCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomField} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:model/PostV1ShopsShopIdCustomFieldsRequest} postV1ShopsShopIdCustomFieldsRequest 
     * @param {module:api/EndpointsApi~postV1ShopsShopIdCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomField}
     */
    postV1ShopsShopIdCustomFields(shopId, postV1ShopsShopIdCustomFieldsRequest, callback) {
      let postBody = postV1ShopsShopIdCustomFieldsRequest;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling postV1ShopsShopIdCustomFields");
      }
      // verify the required parameter 'postV1ShopsShopIdCustomFieldsRequest' is set
      if (postV1ShopsShopIdCustomFieldsRequest === undefined || postV1ShopsShopIdCustomFieldsRequest === null) {
        throw new Error("Missing the required parameter 'postV1ShopsShopIdCustomFieldsRequest' when calling postV1ShopsShopIdCustomFields");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomField;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/custom-fields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV1ShopsShopIdDomains operation.
     * @callback module:api/EndpointsApi~postV1ShopsShopIdDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Domain} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:api/EndpointsApi~postV1ShopsShopIdDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Domain}
     */
    postV1ShopsShopIdDomains(shopId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling postV1ShopsShopIdDomains");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Domain;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/domains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV1ShopsShopIdFeedbacksFeedbackIdAppeal operation.
     * @callback module:api/EndpointsApi~postV1ShopsShopIdFeedbacksFeedbackIdAppealCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostV1ShopsShopIdFeedbacksFeedbackIdAppeal200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} feedbackId 
     * @param {module:api/EndpointsApi~postV1ShopsShopIdFeedbacksFeedbackIdAppealCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostV1ShopsShopIdFeedbacksFeedbackIdAppeal200Response}
     */
    postV1ShopsShopIdFeedbacksFeedbackIdAppeal(shopId, feedbackId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling postV1ShopsShopIdFeedbacksFeedbackIdAppeal");
      }
      // verify the required parameter 'feedbackId' is set
      if (feedbackId === undefined || feedbackId === null) {
        throw new Error("Missing the required parameter 'feedbackId' when calling postV1ShopsShopIdFeedbacksFeedbackIdAppeal");
      }

      let pathParams = {
        'shopId': shopId,
        'feedbackId': feedbackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PostV1ShopsShopIdFeedbacksFeedbackIdAppeal200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/feedbacks/{feedbackId}/appeal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV1ShopsShopIdFeedbacksFeedbackIdReply operation.
     * @callback module:api/EndpointsApi~postV1ShopsShopIdFeedbacksFeedbackIdReplyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostV1ShopsShopIdFeedbacksFeedbackIdReply200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} feedbackId 
     * @param {module:model/PostV1ShopsShopIdFeedbacksFeedbackIdReplyRequest} postV1ShopsShopIdFeedbacksFeedbackIdReplyRequest 
     * @param {module:api/EndpointsApi~postV1ShopsShopIdFeedbacksFeedbackIdReplyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostV1ShopsShopIdFeedbacksFeedbackIdReply200Response}
     */
    postV1ShopsShopIdFeedbacksFeedbackIdReply(shopId, feedbackId, postV1ShopsShopIdFeedbacksFeedbackIdReplyRequest, callback) {
      let postBody = postV1ShopsShopIdFeedbacksFeedbackIdReplyRequest;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling postV1ShopsShopIdFeedbacksFeedbackIdReply");
      }
      // verify the required parameter 'feedbackId' is set
      if (feedbackId === undefined || feedbackId === null) {
        throw new Error("Missing the required parameter 'feedbackId' when calling postV1ShopsShopIdFeedbacksFeedbackIdReply");
      }
      // verify the required parameter 'postV1ShopsShopIdFeedbacksFeedbackIdReplyRequest' is set
      if (postV1ShopsShopIdFeedbacksFeedbackIdReplyRequest === undefined || postV1ShopsShopIdFeedbacksFeedbackIdReplyRequest === null) {
        throw new Error("Missing the required parameter 'postV1ShopsShopIdFeedbacksFeedbackIdReplyRequest' when calling postV1ShopsShopIdFeedbacksFeedbackIdReply");
      }

      let pathParams = {
        'shopId': shopId,
        'feedbackId': feedbackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostV1ShopsShopIdFeedbacksFeedbackIdReply200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/feedbacks/{feedbackId}/reply', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV1ShopsShopIdGroups operation.
     * @callback module:api/EndpointsApi~postV1ShopsShopIdGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:model/PostV1ShopsShopIdGroupsRequest} postV1ShopsShopIdGroupsRequest 
     * @param {module:api/EndpointsApi~postV1ShopsShopIdGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    postV1ShopsShopIdGroups(shopId, postV1ShopsShopIdGroupsRequest, callback) {
      let postBody = postV1ShopsShopIdGroupsRequest;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling postV1ShopsShopIdGroups");
      }
      // verify the required parameter 'postV1ShopsShopIdGroupsRequest' is set
      if (postV1ShopsShopIdGroupsRequest === undefined || postV1ShopsShopIdGroupsRequest === null) {
        throw new Error("Missing the required parameter 'postV1ShopsShopIdGroupsRequest' when calling postV1ShopsShopIdGroups");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV1ShopsShopIdImages operation.
     * @callback module:api/EndpointsApi~postV1ShopsShopIdImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Image} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {Object} opts Optional parameters
     * @param {File} [image] Must be an image. Must not be greater than 20480 kilobytes.
     * @param {module:api/EndpointsApi~postV1ShopsShopIdImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Image}
     */
    postV1ShopsShopIdImages(shopId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling postV1ShopsShopIdImages");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image': opts['image']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Image;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV1ShopsShopIdInvoicesInvoiceIdArchive operation.
     * @callback module:api/EndpointsApi~postV1ShopsShopIdInvoicesInvoiceIdArchiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostV1ShopsShopIdInvoicesInvoiceIdArchive200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} invoiceId 
     * @param {module:api/EndpointsApi~postV1ShopsShopIdInvoicesInvoiceIdArchiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostV1ShopsShopIdInvoicesInvoiceIdArchive200Response}
     */
    postV1ShopsShopIdInvoicesInvoiceIdArchive(shopId, invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling postV1ShopsShopIdInvoicesInvoiceIdArchive");
      }
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling postV1ShopsShopIdInvoicesInvoiceIdArchive");
      }

      let pathParams = {
        'shopId': shopId,
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PostV1ShopsShopIdInvoicesInvoiceIdArchive200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/invoices/{invoiceId}/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV1ShopsShopIdInvoicesInvoiceIdUnarchive operation.
     * @callback module:api/EndpointsApi~postV1ShopsShopIdInvoicesInvoiceIdUnarchiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostV1ShopsShopIdInvoicesInvoiceIdUnarchive200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} invoiceId 
     * @param {module:api/EndpointsApi~postV1ShopsShopIdInvoicesInvoiceIdUnarchiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostV1ShopsShopIdInvoicesInvoiceIdUnarchive200Response}
     */
    postV1ShopsShopIdInvoicesInvoiceIdUnarchive(shopId, invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling postV1ShopsShopIdInvoicesInvoiceIdUnarchive");
      }
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling postV1ShopsShopIdInvoicesInvoiceIdUnarchive");
      }

      let pathParams = {
        'shopId': shopId,
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PostV1ShopsShopIdInvoicesInvoiceIdUnarchive200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/invoices/{invoiceId}/unarchive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV1ShopsShopIdPayoutsPayout operation.
     * @callback module:api/EndpointsApi~postV1ShopsShopIdPayoutsPayoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostV1ShopsShopIdPayoutsPayout200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:model/PostV1ShopsShopIdPayoutsPayoutRequest} postV1ShopsShopIdPayoutsPayoutRequest 
     * @param {module:api/EndpointsApi~postV1ShopsShopIdPayoutsPayoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostV1ShopsShopIdPayoutsPayout200Response}
     */
    postV1ShopsShopIdPayoutsPayout(shopId, postV1ShopsShopIdPayoutsPayoutRequest, callback) {
      let postBody = postV1ShopsShopIdPayoutsPayoutRequest;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling postV1ShopsShopIdPayoutsPayout");
      }
      // verify the required parameter 'postV1ShopsShopIdPayoutsPayoutRequest' is set
      if (postV1ShopsShopIdPayoutsPayoutRequest === undefined || postV1ShopsShopIdPayoutsPayoutRequest === null) {
        throw new Error("Missing the required parameter 'postV1ShopsShopIdPayoutsPayoutRequest' when calling postV1ShopsShopIdPayoutsPayout");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostV1ShopsShopIdPayoutsPayout200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/payouts/payout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV1ShopsShopIdProducts operation.
     * @callback module:api/EndpointsApi~postV1ShopsShopIdProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostV1ShopsShopIdProducts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:model/PostV1ShopsShopIdProductsRequest} postV1ShopsShopIdProductsRequest 
     * @param {module:api/EndpointsApi~postV1ShopsShopIdProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostV1ShopsShopIdProducts200Response}
     */
    postV1ShopsShopIdProducts(shopId, postV1ShopsShopIdProductsRequest, callback) {
      let postBody = postV1ShopsShopIdProductsRequest;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling postV1ShopsShopIdProducts");
      }
      // verify the required parameter 'postV1ShopsShopIdProductsRequest' is set
      if (postV1ShopsShopIdProductsRequest === undefined || postV1ShopsShopIdProductsRequest === null) {
        throw new Error("Missing the required parameter 'postV1ShopsShopIdProductsRequest' when calling postV1ShopsShopIdProducts");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostV1ShopsShopIdProducts200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV1ShopsShopIdThemes operation.
     * @callback module:api/EndpointsApi~postV1ShopsShopIdThemesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Theme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:model/PostV1ShopsShopIdThemesRequest} postV1ShopsShopIdThemesRequest 
     * @param {module:api/EndpointsApi~postV1ShopsShopIdThemesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Theme}
     */
    postV1ShopsShopIdThemes(shopId, postV1ShopsShopIdThemesRequest, callback) {
      let postBody = postV1ShopsShopIdThemesRequest;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling postV1ShopsShopIdThemes");
      }
      // verify the required parameter 'postV1ShopsShopIdThemesRequest' is set
      if (postV1ShopsShopIdThemesRequest === undefined || postV1ShopsShopIdThemesRequest === null) {
        throw new Error("Missing the required parameter 'postV1ShopsShopIdThemesRequest' when calling postV1ShopsShopIdThemes");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Theme;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/themes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV1ShopsShopIdThemesThemeIdImport operation.
     * @callback module:api/EndpointsApi~postV1ShopsShopIdThemesThemeIdImportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostV1ShopsShopIdThemesThemeIdImport200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} themeId 
     * @param {module:api/EndpointsApi~postV1ShopsShopIdThemesThemeIdImportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostV1ShopsShopIdThemesThemeIdImport200Response}
     */
    postV1ShopsShopIdThemesThemeIdImport(shopId, themeId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling postV1ShopsShopIdThemesThemeIdImport");
      }
      // verify the required parameter 'themeId' is set
      if (themeId === undefined || themeId === null) {
        throw new Error("Missing the required parameter 'themeId' when calling postV1ShopsShopIdThemesThemeIdImport");
      }

      let pathParams = {
        'shopId': shopId,
        'themeId': themeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PostV1ShopsShopIdThemesThemeIdImport200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/themes/{themeId}/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV1ShopsShopIdThemesThemeIdUpdate operation.
     * @callback module:api/EndpointsApi~postV1ShopsShopIdThemesThemeIdUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostV1ShopsShopIdThemesThemeIdUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} themeId 
     * @param {module:api/EndpointsApi~postV1ShopsShopIdThemesThemeIdUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostV1ShopsShopIdThemesThemeIdUpdate200Response}
     */
    postV1ShopsShopIdThemesThemeIdUpdate(shopId, themeId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling postV1ShopsShopIdThemesThemeIdUpdate");
      }
      // verify the required parameter 'themeId' is set
      if (themeId === undefined || themeId === null) {
        throw new Error("Missing the required parameter 'themeId' when calling postV1ShopsShopIdThemesThemeIdUpdate");
      }

      let pathParams = {
        'shopId': shopId,
        'themeId': themeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PostV1ShopsShopIdThemesThemeIdUpdate200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/themes/{themeId}/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV1ShopsShopIdCouponsCouponIdUpdate operation.
     * @callback module:api/EndpointsApi~putV1ShopsShopIdCouponsCouponIdUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Coupon} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} couponId 
     * @param {module:model/PutV1ShopsShopIdCouponsCouponIdUpdateRequest} putV1ShopsShopIdCouponsCouponIdUpdateRequest 
     * @param {module:api/EndpointsApi~putV1ShopsShopIdCouponsCouponIdUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Coupon}
     */
    putV1ShopsShopIdCouponsCouponIdUpdate(shopId, couponId, putV1ShopsShopIdCouponsCouponIdUpdateRequest, callback) {
      let postBody = putV1ShopsShopIdCouponsCouponIdUpdateRequest;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling putV1ShopsShopIdCouponsCouponIdUpdate");
      }
      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling putV1ShopsShopIdCouponsCouponIdUpdate");
      }
      // verify the required parameter 'putV1ShopsShopIdCouponsCouponIdUpdateRequest' is set
      if (putV1ShopsShopIdCouponsCouponIdUpdateRequest === undefined || putV1ShopsShopIdCouponsCouponIdUpdateRequest === null) {
        throw new Error("Missing the required parameter 'putV1ShopsShopIdCouponsCouponIdUpdateRequest' when calling putV1ShopsShopIdCouponsCouponIdUpdate");
      }

      let pathParams = {
        'shopId': shopId,
        'couponId': couponId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Coupon;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/coupons/{couponId}/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV1ShopsShopIdCustomFieldsCustomFieldId operation.
     * @callback module:api/EndpointsApi~putV1ShopsShopIdCustomFieldsCustomFieldIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomField} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} customFieldId 
     * @param {module:model/PutV1ShopsShopIdCustomFieldsCustomFieldIdRequest} putV1ShopsShopIdCustomFieldsCustomFieldIdRequest 
     * @param {module:api/EndpointsApi~putV1ShopsShopIdCustomFieldsCustomFieldIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomField}
     */
    putV1ShopsShopIdCustomFieldsCustomFieldId(shopId, customFieldId, putV1ShopsShopIdCustomFieldsCustomFieldIdRequest, callback) {
      let postBody = putV1ShopsShopIdCustomFieldsCustomFieldIdRequest;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling putV1ShopsShopIdCustomFieldsCustomFieldId");
      }
      // verify the required parameter 'customFieldId' is set
      if (customFieldId === undefined || customFieldId === null) {
        throw new Error("Missing the required parameter 'customFieldId' when calling putV1ShopsShopIdCustomFieldsCustomFieldId");
      }
      // verify the required parameter 'putV1ShopsShopIdCustomFieldsCustomFieldIdRequest' is set
      if (putV1ShopsShopIdCustomFieldsCustomFieldIdRequest === undefined || putV1ShopsShopIdCustomFieldsCustomFieldIdRequest === null) {
        throw new Error("Missing the required parameter 'putV1ShopsShopIdCustomFieldsCustomFieldIdRequest' when calling putV1ShopsShopIdCustomFieldsCustomFieldId");
      }

      let pathParams = {
        'shopId': shopId,
        'customFieldId': customFieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomField;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/custom-fields/{customFieldId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV1ShopsShopIdGroupsGroupIdUpdate operation.
     * @callback module:api/EndpointsApi~putV1ShopsShopIdGroupsGroupIdUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} groupId 
     * @param {module:model/PutV1ShopsShopIdGroupsGroupIdUpdateRequest} putV1ShopsShopIdGroupsGroupIdUpdateRequest 
     * @param {module:api/EndpointsApi~putV1ShopsShopIdGroupsGroupIdUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    putV1ShopsShopIdGroupsGroupIdUpdate(shopId, groupId, putV1ShopsShopIdGroupsGroupIdUpdateRequest, callback) {
      let postBody = putV1ShopsShopIdGroupsGroupIdUpdateRequest;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling putV1ShopsShopIdGroupsGroupIdUpdate");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling putV1ShopsShopIdGroupsGroupIdUpdate");
      }
      // verify the required parameter 'putV1ShopsShopIdGroupsGroupIdUpdateRequest' is set
      if (putV1ShopsShopIdGroupsGroupIdUpdateRequest === undefined || putV1ShopsShopIdGroupsGroupIdUpdateRequest === null) {
        throw new Error("Missing the required parameter 'putV1ShopsShopIdGroupsGroupIdUpdateRequest' when calling putV1ShopsShopIdGroupsGroupIdUpdate");
      }

      let pathParams = {
        'shopId': shopId,
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/groups/{groupId}/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV1ShopsShopIdPaymentProcessorsUpdate operation.
     * @callback module:api/EndpointsApi~putV1ShopsShopIdPaymentProcessorsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutV1ShopsShopIdPaymentProcessorsUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:model/PutV1ShopsShopIdPaymentProcessorsUpdateRequest} putV1ShopsShopIdPaymentProcessorsUpdateRequest 
     * @param {module:api/EndpointsApi~putV1ShopsShopIdPaymentProcessorsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutV1ShopsShopIdPaymentProcessorsUpdate200Response}
     */
    putV1ShopsShopIdPaymentProcessorsUpdate(shopId, putV1ShopsShopIdPaymentProcessorsUpdateRequest, callback) {
      let postBody = putV1ShopsShopIdPaymentProcessorsUpdateRequest;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling putV1ShopsShopIdPaymentProcessorsUpdate");
      }
      // verify the required parameter 'putV1ShopsShopIdPaymentProcessorsUpdateRequest' is set
      if (putV1ShopsShopIdPaymentProcessorsUpdateRequest === undefined || putV1ShopsShopIdPaymentProcessorsUpdateRequest === null) {
        throw new Error("Missing the required parameter 'putV1ShopsShopIdPaymentProcessorsUpdateRequest' when calling putV1ShopsShopIdPaymentProcessorsUpdate");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutV1ShopsShopIdPaymentProcessorsUpdate200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/payment-processors/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV1ShopsShopIdProductsProductIdUpdate operation.
     * @callback module:api/EndpointsApi~putV1ShopsShopIdProductsProductIdUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostV1ShopsShopIdProducts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} productId 
     * @param {module:model/PutV1ShopsShopIdProductsProductIdUpdateRequest} putV1ShopsShopIdProductsProductIdUpdateRequest 
     * @param {module:api/EndpointsApi~putV1ShopsShopIdProductsProductIdUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostV1ShopsShopIdProducts200Response}
     */
    putV1ShopsShopIdProductsProductIdUpdate(shopId, productId, putV1ShopsShopIdProductsProductIdUpdateRequest, callback) {
      let postBody = putV1ShopsShopIdProductsProductIdUpdateRequest;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling putV1ShopsShopIdProductsProductIdUpdate");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling putV1ShopsShopIdProductsProductIdUpdate");
      }
      // verify the required parameter 'putV1ShopsShopIdProductsProductIdUpdateRequest' is set
      if (putV1ShopsShopIdProductsProductIdUpdateRequest === undefined || putV1ShopsShopIdProductsProductIdUpdateRequest === null) {
        throw new Error("Missing the required parameter 'putV1ShopsShopIdProductsProductIdUpdateRequest' when calling putV1ShopsShopIdProductsProductIdUpdate");
      }

      let pathParams = {
        'shopId': shopId,
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostV1ShopsShopIdProducts200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/products/{productId}/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV1ShopsShopIdThemesThemeId operation.
     * @callback module:api/EndpointsApi~putV1ShopsShopIdThemesThemeIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Theme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} themeId 
     * @param {Object} opts Optional parameters
     * @param {module:model/PutV1ShopsShopIdThemesThemeIdRequest} [putV1ShopsShopIdThemesThemeIdRequest] 
     * @param {module:api/EndpointsApi~putV1ShopsShopIdThemesThemeIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Theme}
     */
    putV1ShopsShopIdThemesThemeId(shopId, themeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['putV1ShopsShopIdThemesThemeIdRequest'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling putV1ShopsShopIdThemesThemeId");
      }
      // verify the required parameter 'themeId' is set
      if (themeId === undefined || themeId === null) {
        throw new Error("Missing the required parameter 'themeId' when calling putV1ShopsShopIdThemesThemeId");
      }

      let pathParams = {
        'shopId': shopId,
        'themeId': themeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Theme;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/themes/{themeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV1ShopsShopIdThemesThemeIdApply operation.
     * @callback module:api/EndpointsApi~putV1ShopsShopIdThemesThemeIdApplyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutV1ShopsShopIdThemesThemeIdApply200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {String} themeId 
     * @param {module:api/EndpointsApi~putV1ShopsShopIdThemesThemeIdApplyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutV1ShopsShopIdThemesThemeIdApply200Response}
     */
    putV1ShopsShopIdThemesThemeIdApply(shopId, themeId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling putV1ShopsShopIdThemesThemeIdApply");
      }
      // verify the required parameter 'themeId' is set
      if (themeId === undefined || themeId === null) {
        throw new Error("Missing the required parameter 'themeId' when calling putV1ShopsShopIdThemesThemeIdApply");
      }

      let pathParams = {
        'shopId': shopId,
        'themeId': themeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PutV1ShopsShopIdThemesThemeIdApply200Response;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/themes/{themeId}/apply', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV1ShopsShopIdUpdate operation.
     * @callback module:api/EndpointsApi~putV1ShopsShopIdUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Shop} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {String} shopId 
     * @param {module:model/PutV1ShopsShopIdUpdateRequest} putV1ShopsShopIdUpdateRequest 
     * @param {module:api/EndpointsApi~putV1ShopsShopIdUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Shop}
     */
    putV1ShopsShopIdUpdate(shopId, putV1ShopsShopIdUpdateRequest, callback) {
      let postBody = putV1ShopsShopIdUpdateRequest;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling putV1ShopsShopIdUpdate");
      }
      // verify the required parameter 'putV1ShopsShopIdUpdateRequest' is set
      if (putV1ShopsShopIdUpdateRequest === undefined || putV1ShopsShopIdUpdateRequest === null) {
        throw new Error("Missing the required parameter 'putV1ShopsShopIdUpdateRequest' when calling putV1ShopsShopIdUpdate");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Shop;
      return this.apiClient.callApi(
        '/v1/shops/{shopId}/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
