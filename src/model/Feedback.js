/**
 * SellAuth
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Feedback model module.
 * @module model/Feedback
 * @version 1.0.0
 */
class Feedback {
    /**
     * Constructs a new <code>Feedback</code>.
     * @alias module:model/Feedback
     */
    constructor() { 
        
        Feedback.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Feedback</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Feedback} obj Optional instance to populate.
     * @return {module:model/Feedback} The populated <code>Feedback</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Feedback();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('salt')) {
                obj['salt'] = ApiClient.convertToType(data['salt'], 'String');
            }
            if (data.hasOwnProperty('shop_id')) {
                obj['shop_id'] = ApiClient.convertToType(data['shop_id'], 'Number');
            }
            if (data.hasOwnProperty('invoice_id')) {
                obj['invoice_id'] = ApiClient.convertToType(data['invoice_id'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], 'Number');
            }
            if (data.hasOwnProperty('is_automatic')) {
                obj['is_automatic'] = ApiClient.convertToType(data['is_automatic'], 'Boolean');
            }
            if (data.hasOwnProperty('reply')) {
                obj['reply'] = ApiClient.convertToType(data['reply'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('replied_at')) {
                obj['replied_at'] = ApiClient.convertToType(data['replied_at'], 'Date');
            }
            if (data.hasOwnProperty('deleted_at')) {
                obj['deleted_at'] = ApiClient.convertToType(data['deleted_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Feedback</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Feedback</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['salt'] && !(typeof data['salt'] === 'string' || data['salt'] instanceof String)) {
            throw new Error("Expected the field `salt` to be a primitive type in the JSON string but got " + data['salt']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['reply'] && !(typeof data['reply'] === 'string' || data['reply'] instanceof String)) {
            throw new Error("Expected the field `reply` to be a primitive type in the JSON string but got " + data['reply']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
Feedback.prototype['id'] = undefined;

/**
 * @member {String} salt
 */
Feedback.prototype['salt'] = undefined;

/**
 * @member {Number} shop_id
 */
Feedback.prototype['shop_id'] = undefined;

/**
 * @member {Number} invoice_id
 */
Feedback.prototype['invoice_id'] = undefined;

/**
 * @member {String} message
 */
Feedback.prototype['message'] = undefined;

/**
 * @member {Number} rating
 */
Feedback.prototype['rating'] = undefined;

/**
 * @member {Boolean} is_automatic
 */
Feedback.prototype['is_automatic'] = undefined;

/**
 * @member {String} reply
 */
Feedback.prototype['reply'] = undefined;

/**
 * @member {Date} created_at
 */
Feedback.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
Feedback.prototype['updated_at'] = undefined;

/**
 * @member {Date} replied_at
 */
Feedback.prototype['replied_at'] = undefined;

/**
 * @member {Date} deleted_at
 */
Feedback.prototype['deleted_at'] = undefined;






export default Feedback;

