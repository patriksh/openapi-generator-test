/**
 * SellAuth
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DomainDnsRecordsInner from './DomainDnsRecordsInner';

/**
 * The Domain model module.
 * @module model/Domain
 * @version 1.0.0
 */
class Domain {
    /**
     * Constructs a new <code>Domain</code>.
     * @alias module:model/Domain
     */
    constructor() { 
        
        Domain.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Domain</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Domain} obj Optional instance to populate.
     * @return {module:model/Domain} The populated <code>Domain</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Domain();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('hostname')) {
                obj['hostname'] = ApiClient.convertToType(data['hostname'], 'String');
            }
            if (data.hasOwnProperty('cloudflare_id')) {
                obj['cloudflare_id'] = ApiClient.convertToType(data['cloudflare_id'], 'String');
            }
            if (data.hasOwnProperty('dns_records')) {
                obj['dns_records'] = ApiClient.convertToType(data['dns_records'], [DomainDnsRecordsInner]);
            }
            if (data.hasOwnProperty('shop_id')) {
                obj['shop_id'] = ApiClient.convertToType(data['shop_id'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('deleted_at')) {
                obj['deleted_at'] = ApiClient.convertToType(data['deleted_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Domain</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Domain</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hostname'] && !(typeof data['hostname'] === 'string' || data['hostname'] instanceof String)) {
            throw new Error("Expected the field `hostname` to be a primitive type in the JSON string but got " + data['hostname']);
        }
        // ensure the json data is a string
        if (data['cloudflare_id'] && !(typeof data['cloudflare_id'] === 'string' || data['cloudflare_id'] instanceof String)) {
            throw new Error("Expected the field `cloudflare_id` to be a primitive type in the JSON string but got " + data['cloudflare_id']);
        }
        if (data['dns_records']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dns_records'])) {
                throw new Error("Expected the field `dns_records` to be an array in the JSON data but got " + data['dns_records']);
            }
            // validate the optional field `dns_records` (array)
            for (const item of data['dns_records']) {
                DomainDnsRecordsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
Domain.prototype['id'] = undefined;

/**
 * @member {String} hostname
 */
Domain.prototype['hostname'] = undefined;

/**
 * @member {String} cloudflare_id
 */
Domain.prototype['cloudflare_id'] = undefined;

/**
 * @member {Array.<module:model/DomainDnsRecordsInner>} dns_records
 */
Domain.prototype['dns_records'] = undefined;

/**
 * @member {Number} shop_id
 */
Domain.prototype['shop_id'] = undefined;

/**
 * @member {String} status
 */
Domain.prototype['status'] = undefined;

/**
 * @member {Date} created_at
 */
Domain.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
Domain.prototype['updated_at'] = undefined;

/**
 * @member {Date} deleted_at
 */
Domain.prototype['deleted_at'] = undefined;






export default Domain;

