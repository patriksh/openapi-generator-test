/**
 * SellAuth
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellAuth);
  }
}(this, function(expect, SellAuth) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellAuth.Product();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Product', function() {
    it('should create an instance of Product', function() {
      // uncomment below and update the code to test Product
      //var instance = new SellAuth.Product();
      //expect(instance).to.be.a(SellAuth.Product);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property salt (base name: "salt")', function() {
      // uncomment below and update the code to test the property salt
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property path (base name: "path")', function() {
      // uncomment below and update the code to test the property path
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property price (base name: "price")', function() {
      // uncomment below and update the code to test the property price
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property paymentMethods (base name: "payment_methods")', function() {
      // uncomment below and update the code to test the property paymentMethods
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property deliverables (base name: "deliverables")', function() {
      // uncomment below and update the code to test the property deliverables
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property deliverablesType (base name: "deliverables_type")', function() {
      // uncomment below and update the code to test the property deliverablesType
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property stock (base name: "stock")', function() {
      // uncomment below and update the code to test the property stock
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property imageUrl (base name: "image_url")', function() {
      // uncomment below and update the code to test the property imageUrl
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property groupId (base name: "group_id")', function() {
      // uncomment below and update the code to test the property groupId
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property shopId (base name: "shop_id")', function() {
      // uncomment below and update the code to test the property shopId
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property volumeDiscounts (base name: "volume_discounts")', function() {
      // uncomment below and update the code to test the property volumeDiscounts
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property instructions (base name: "instructions")', function() {
      // uncomment below and update the code to test the property instructions
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property outOfStockMessage (base name: "out_of_stock_message")', function() {
      // uncomment below and update the code to test the property outOfStockMessage
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property sortPriority (base name: "sort_priority")', function() {
      // uncomment below and update the code to test the property sortPriority
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property groupSortPriority (base name: "group_sort_priority")', function() {
      // uncomment below and update the code to test the property groupSortPriority
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property visibility (base name: "visibility")', function() {
      // uncomment below and update the code to test the property visibility
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property onHold (base name: "on_hold")', function() {
      // uncomment below and update the code to test the property onHold
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property cloudflareImageId (base name: "cloudflare_image_id")', function() {
      // uncomment below and update the code to test the property cloudflareImageId
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property deletedAt (base name: "deleted_at")', function() {
      // uncomment below and update the code to test the property deletedAt
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property quantityMin (base name: "quantity_min")', function() {
      // uncomment below and update the code to test the property quantityMin
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property quantityMax (base name: "quantity_max")', function() {
      // uncomment below and update the code to test the property quantityMax
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property discordGuildId (base name: "discord_guild_id")', function() {
      // uncomment below and update the code to test the property discordGuildId
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property discordRoleId (base name: "discord_role_id")', function() {
      // uncomment below and update the code to test the property discordRoleId
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property blockVpn (base name: "block_vpn")', function() {
      // uncomment below and update the code to test the property blockVpn
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

    it('should have the property stockCount (base name: "stock_count")', function() {
      // uncomment below and update the code to test the property stockCount
      //var instance = new SellAuth.Product();
      //expect(instance).to.be();
    });

  });

}));
